name: bento

services:
  redis:
    hostname: ${REDIS_HOST}
    image: ${REDIS_IMG}
    restart: always
    ports:
      - 6379:6379
    volumes:
      - redis-data:/data

  grafana:
    image: ${GRAFANA_IMG}
    restart: unless-stopped
    ports:
     - '3000:3000'
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_LOG_LEVEL=WARN
      - GF_INSTALL_PLUGINS=frser-sqlite-datasource
    volumes:
      - ./dockerfiles/grafana:/etc/grafana/provisioning/
      - grafana-data:/var/lib/grafana
    depends_on:
      - redis


  exec_agent:
    image: agent
    runtime: nvidia
    restart: always
    depends_on:
      - redis

    build:
      context: .
      dockerfile: dockerfiles/agent.dockerfile
      args:
        NVCC_APPEND_FLAGS: '--gpu-architecture=compute_86 --gpu-code=compute_86,sm_86 --generate-code arch=compute_86,code=sm_86'
        CUDA_OPT_LEVEL: 1

    mem_limit: 4G
    cpus: 4

    environment:
      REDIS_URL: redis://${REDIS_HOST}:6379
      RUST_LOG: ${RUST_LOG}
      RUST_BACKTRACE: 1
      RISC0_KECCAK_PO2: 17
      # Enable / disable along with gpu_*_agent*
      # JOIN_STREAM: 1
      # COPROC_STREAM: 1

    entrypoint: /app/agent -t executor --segment-po2 21

  gpu_prove_agent0: &gpu
    image: agent
    runtime: nvidia
    pull_policy: never
    restart: always
    depends_on:
      - redis

    mem_limit: 4G
    cpus: 4

    environment:
      REDIS_URL: redis://${REDIS_HOST}:6379
      RUST_LOG: ${RUST_LOG}

    entrypoint: /app/agent -t prove

    # comment-out if running in CPU proving mode
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              # TODO: how to scale this with N gpus?
              device_ids: ['0']
              capabilities: [gpu]

  gpu_prove_agent2:
    <<: *gpu
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['2']
              capabilities: [gpu]


  gpu_join_agent0:
    <<: *gpu
    entrypoint: /app/agent -t join
    deploy:
     resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['1']
              capabilities: [gpu]

  # gpu_coproc_agent0:
  #   <<: *gpu
  #   mem_limit: 2G
  #   cpus: 2
  #   entrypoint: /app/agent -t coproc


  snark_agent:
    image: agent
    runtime: nvidia

    pull_policy: never

    restart: always

    depends_on:
      - redis

    environment:
      REDIS_URL: redis://${REDIS_HOST}:6379
      RUST_LOG: ${RUST_LOG}
      RUST_BACKTRACE: 1

    entrypoint: /app/agent -t snark

    ulimits:
      stack: 90000000

  rest_api:
    restart: always
    depends_on:
      - minio

    build:
      context: .
      dockerfile: dockerfiles/rest_api.dockerfile

    mem_limit: 1G
    cpus: 1

    environment:
      RUST_LOG: ${RUST_LOG}
      RUST_BACKTRACE: 1

    ports:
      - '8081:8081'

    entrypoint: /app/rest_api --bind-address 0.0.0.0:8081

volumes:
  redis-data:
  grafana-data:
